%YAML 1.2
---
file_extensions: [org, org_archive]
first_line_match: "^#[+][A-Z]+"
scope: text.org
name: Zorgmode

contexts:
    main:
        - include: expect_agenda
        - include: expect_headline
        - include: expect_org_text
        - include: expect_link
        - include: expect_special_line

    expect_list_entry:
        - match: '^(\s+[*]|\s*[-+]|\s*[0-9]*[.]|\s[a-zA-Z][.])\s+'
          push: list_entry
    
    expect_org_text:
        - include: expect_link
        - include: expect_src

    list_entry:
        - meta_scope: entry.list.text.org
        - include: expect_org_text
        - match: '(\n)?$'
          pop: true

    expect_headline:
        - match: '^[*]{1}\s'
          push: headline1
        - match: '^[*]{2}\s'
          push: headline2
        - match: '^[*]{3}\s'
          push: headline3
        - match: '^[*]{4}\s'
          push: headline4
        - match: '^[*]{5}[*]*\s'
          push: headline5p

    headline1:
        - meta_scope: heading.1.text.org
        - include: expect_org_text
        - match: '(\n)?$'
          pop: true

    headline2:
        - meta_scope: heading.2.text.org
        - include: expect_org_text
        - match: '(\n)?$'
          pop: true

    headline3:
        - meta_scope: heading.3.text.org
        - include: expect_org_text
        - match: '(\n)?$'
          pop: true

    headline4:
        - meta_scope: heading.4.text.org
        - include: expect_org_text
        - match: '(\n)?$'
          pop: true

    headline5p:
        - meta_scope: heading.5p.text.org
        - include: expect_org_text
        - match: '(\n)?$'
          pop: true

    expect_link:
        # Links like [[http://github.com/]]
        - match: |-
            (?x:
              \[\[
                (
                  (?:[^\[\]]|\\\[|\\\])*
                )
              \]\]
            )
          captures:
            0: link.text.org
            1: markup.underline.link.text.org

        # Links like [[http://github.com/][GitHub]]
        - match: |-
            (?x:
              \[\[
                (?: # TODO: use variable
                  (?:[^\[\]]|\\\[|\\\])*
                )
              \]\[
                (
                  (?:[^\[\]]|\\\[|\\\])*
                )
              \]\]
            )
          captures:
            0: link.text.org
            1: markup.underline.link.text.org

        # Emplaced URLs
        # Honestly copypasted from http://urlregex.com/
        - match: '(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+)'
          captures:
            0: link.text.org
            1: markup.underline.link.text.org

    expect_special_line:
        - match: '^#\+[A-Z_]+:.*$'
          scope: special_line.text.org

    expect_src:
        - match: '^\s*#\+BEGIN_SRC\s+(bash)\s*\n'
          scope: special_line
          embed: Packages/ShellScript/Bash.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(C|c)\s*\n'
          scope: special_line
          embed: Packages/C++/C.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(c\+\+|cpp|cxx|C\+\+|CPP|CXX)\s*\n'
          scope: special_line
          embed: Packages/C++/C++.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(c#|C#|cs)\s*\n'
          scope: special_line
          embed: Packages/C#/C#.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(clj)\s*\n'
          scope: special_line
          embed: Packages/Clojure/Clojure.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(css)\s*\n'
          scope: special_line
          embed: Packages/CSS/CSS.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(d)\s*\n'
          scope: special_line
          embed: Packages/D/D.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(diff)\s*\n'
          scope: special_line
          embed: Packages/Diff/Diff.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(erl)\s*\n'
          scope: special_line
          embed: Packages/Erlang/Erlang.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(go)\s*\n'
          scope: special_line
          embed: Packages/Go/Go.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(hs|haskell)\s*\n'
          scope: special_line
          embed: Packages/Haskell/Haskell.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(java)\s*\n'
          scope: special_line
          embed: Packages/Java/Java.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(js|JavaScript)\s*\n'
          scope: special_line
          embed: Packages/JavaScript/JavaScript.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(lisp)\s*\n'
          scope: special_line
          embed: Packages/Lisp/Lisp.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(lua)\s*\n'
          scope: special_line
          embed: Packages/Lua/Lua.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(make)\s*\n'
          scope: special_line
          embed: Packages/Makefile/Makefile.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(md|Markdown)\s*\n'
          scope: special_line
          embed: Packages/Markdown/Markdown.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(ocaml)\s*\n'
          scope: special_line
          embed: Packages/OCaml/OCaml.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(org)\s*\n'
          scope: special_line
          embed: Packages/Zorgmode/Zorgmode.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(perl)\s*\n'
          scope: special_line
          embed: Packages/Perl/Perl.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(php)\s*\n'
          scope: special_line
          embed: Packages/PHP/PHP.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(python|py)\s*\n'
          scope: special_line
          embed: Packages/Python/Python.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(r)\s*\n'
          scope: special_line
          embed: Packages/R/R.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(rs|rust)\s*\n'
          scope: special_line
          embed: Packages/Rust/Rust.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(rst)\s*\n'
          scope: special_line
          embed: Packages/RestructuredText/reStructuredText.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(rb)\s*\n'
          scope: special_line
          embed: Packages/Ruby/Ruby.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(scala)\s*\n'
          scope: special_line
          embed: Packages/Scala/Scala.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(sh)\s*\n'
          scope: special_line
          embed: Packages/ShellScript/Shell-Unix-Generic.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(sql)\s*\n'
          scope: special_line
          embed: Packages/SQL/SQL.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(tcl)\s*\n'
          scope: special_line
          embed: Packages/TCL/Tcl.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(xml)\s*\n'
          scope: special_line
          embed: Packages/XML/XML.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC\s+(yml)\s*\n'
          scope: special_line
          embed: Packages/YAML/YAML.sublime-syntax
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_SRC.*\n'
          scope: special_line
          embed: verbatim
          embed_scope: markup.raw
          escape : '^\s*#\+END_SRC\s*'
          escape_captures:
            0: special_line

        - match: '^\s*#\+BEGIN_EXAMPLE.*\n'
          scope: special_line
          embed: verbatim
          embed_scope: markup.raw
          escape : '^\s*#\+END_EXAMPLE\s*'
          escape_captures:
            0: special_line

        - match: '^\s*:.*\n'
          scope: markup.raw
        
        - match: '[~][^~]*[~]'
          scope: markup.raw
        

    verbatim:
        - meta_scope: text.plain


    expect_agenda:
        - match: '^#\+BEGIN_AGENDA'
          scope: special_line
          push: inside_agenda


    inside_agenda:
        - match: '^\s*TODO:'
          push: inside_agenda_item
        - match: '#\+WARNING: .*$'
          scope: warning.agenda.text.org
        - include: expect_org_text
        - match: '^#\+END_AGENDA$'
          scope: special_line
          pop: true

    inside_agenda_item:
      - meta_scope: item.agenda.text.org
      - include: expect_org_text
      - match: '$'
        pop: true
